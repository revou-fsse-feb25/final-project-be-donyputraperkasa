// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // atau mysql/sqlite, sesuaikan
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String
  role         UserRole       @default(STUDENT)
  enrollments  Enrollment[]
  announcement Announcement[]
  transaction  Transaction[]
  reviews      Review[]
}

model Course {
  id          String        @id @default(uuid())
  title       String
  description String
  enrollments Enrollment[]
  transaction Transaction[]
  reviews     Review[]
  Lesson      Lesson[]
}

model Enrollment {
  id       String @id @default(uuid())
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String // harus sama tipe-nya dengan User.id
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String // harus sama tipe-nya dengan Course.id
  amount    Decimal
  status    String
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
}
